= About Logging
ifndef::env-site,env-github[]
include::_attributes.adoc[]
endif::[]
:keywords: mule, studio, logger, logs, log, notifications, errors, debug

To help debug your app, you can use log statements that follow your app's state, which reside in the Mule messages that flow through your configuration and, possibly, custom code.

* In Anypoint Studio, log output is visible in the Console view, for example:
+
[source,text,linenums]
----
INFO  2018-02-23 12:27:28,178
[[MuleRuntime].cpuLight.02:[me].myFlow.CPU_LITE @6953d516]
[event: 0-f75a5dd0-18d7-11e8-9fd8-38c9864c2f8f] org.mule.runtime.core.internal.processor.LoggerMessageProcessor: {
  "example": "{     \"id\": 1,     \"name\": \"Leanne Graham\" }"
}
----
+
////
THIS DOES NOT SEEM TRUE IN STUDIO 7.1:
Note that if you can also see log output in the `.mule` directory of your Studio workspace. For example, on a Mac, for an application called `Basic Tutorial`, the log output is in this file:
+
[source,text,linenums]
----
/Users/me/AnypointStudio/studio-workspace/.mule/logs/basic_tutorial.log
----
////
+
* If you run Mule from the command line, logs are visible in your OS console. Mule's standalone logging configuration is stored in `<Mule Installation Directory>/conf/log4j2.xml`. This is your `$MULE_HOME` directory.

== See Also

xref:logger-component-reference.adoc[Logger Component Reference]

link:logging-in-mule-standalone[Logging in a Standalone Mule Instance]