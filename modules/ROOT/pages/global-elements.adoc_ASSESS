= Global Elements
ifndef::env-site,env-github[]
include::_attributes.adoc[]
endif::[]
:keywords: studio, server, components, connectors, elements, palette, global elements, configuration elements

A *global element* is an object that you define once to configure specific parameters for a module in a Mule flow. Rather than repeatedly writing the same code to apply the same configuration to multiple _local_ elements in flows, you create one _global_ element that details your connection, configuration or transport details.

Then, you can require any number of elements across flows in your Mule application to reference the global element to configure runtime behavior.

////
== Essentials

Before venturing further into this topic, review the features of the xref:6@studio::index.adoc[Anypoint Studio Visual Editor] to learn more about developing Mule applications using the Anypoint Studio graphical user interface and to understand the context in which we use these "global elements".
////


Global elements provide a number of benefits to you as a Mule application developer:

* *Reusability*: You can configure a global element just once, and *_share that configuration among building blocks of the same type_*. This is particularly useful when you have to define the connection details and login credentials for an external source, such as a SaaS application or database.

* *Efficiency*: Rather than changing the same configuration multiple times within many like building blocks (e.g. multiple connectors that hook into the same service, using one set of credentials) throughout the Mule flow, you can change the configuration once in the global element, and the changes apply to all Mule flow elements that reference the global element.

* *Flexibility*: An element in a Mule flow can apply a global elementâ€™s configuration exactly as defined, or compliment the global configuration properties.


////
== How to Create a Global Element

[NOTE]
Some components _require_ their properties be stored in a global element.
In any case, we recommend you use global elements for the <<advantages,Advantages>> listed in the previous section.


[tabs]
------
[tab,title="Anypoint Studio Visual Editor"]
....
. In the Anypoint Studio Visual Editor, click the *Global Elements* tab at the base of the canvas to access a list of all global elements in an application.
+
image::global-element-create-annot.png[GEtab]
+
. Click *Create* to add a new global element.
. In the *Choose Global Type* wizard, navigate the directories or use the filter to select the _type_ of global element you wish to create, then click *OK*.
. Define the configurable parameters of your global element in the *Global Element Properties* window that appears, then click *OK* to save.

+

[TIP]
====
*_To create a new global element from within a local element you placed in your flow:_*

. Click one of the pieces of your flow whose global element you want to create/configure. A box should appear around the element in the flow -- take for instance, an IMAP connector that has been clicked on:
+
image::global-elements-be086.png[imap example selected]
+
. In the properties pane that appears below the canvas, click the plus icon next to the *Connector Configuration* or similar reference field dropdown menu. (Click the Edit icon to edit an existing global element you may have already created.)
+
image::connector-configuration.png[connectorconfiguration]
. Fill in the required fields for the type of global element you set out to create.

====
....
[tab,title="XML Editor or Standalone"]
....
. In the XML Editor in Studio, or other text editor, open your XML configuration file for your Mule application.
. Create a global element for your Mule flow element _above and outside_ any <flow> you may have defined already in your application.
. Define the attribute values that your local element will reference, within the global element you create.
. To configure a _local_ element in the flow to reference a _global_ element, add a `config-ref` or `connector-ref` attribute inside the _local_ element, which appears inside the `<flow>`. The example below has a global element for the Salesforce connector (`sfdc:config`)
. The flow includes a Salesforce connector (`sfdc:create`) that references the global Salesforce element, named "Salesforce1":
`<sfdc:create config-ref="Salesforce1" type="" doc:name="Salesforce Connector">`

[source,xml,linenums]
----
<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd

http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd

http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd

http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd

http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd

http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">

    <sfdc:config name="Salesforce1" username="username" password="password"  doc:name="Salesforce" securityToken="IQZjCdweSF45JD90Me2BWLLVDo">
        <sfdc:connection-pooling-profile initialisationPolicy="INITIALISE_ONE" exhaustedAction="WHEN_EXHAUSTED_GROW"/>
    </sfdc:config>

    <flow name="Contacts_to_SFDC" doc:name="Contacts_to_SFDC">
        ...
        <sfdc:create config-ref="Salesforce1" type="" doc:name="Salesforce Connector">
            <sfdc:objects ref="#[payload]"/>
        </sfdc:create>
    </flow>

</mule>
----
....
------

== Global Element Examples

=== Example 1 - Global Element to Append a String

[TIP]
If you find that you need to append the same string multiple times at various points in a flow, you might store such a piece of functionality inside a global element for a *Transformer* of type *Append String*, where the *Message* field would be where you store your string to append.

image::global-elements-f7eb3.png[example ge for append string]

=== Example 2 - Global Element for an HTTP Listener

Let's see how to configure a global element for a typical HTTP listener you might test in an app you run locally in Studio, using its embedded Mule runtime engine.

. Drag the HTTP listener onto the Anypoint Studio canvas to begin creating its global element. Select it with your mouse.
+
image::global-elements-1692e.png[http listener snapshot]
+
. After clicking the HTTP listener in the flow, you see the HTTP listener pane at bottom. From there, focus in and click the plus sign.
+
image::connector-configuration.png[connectorconfiguration]
+
. Configure the HTTP listener to listen for HTTP requests; in this case, `localhost`, port `8081`
+
image::global-elements-c1536.png[]
+
. Returning to the main HTTP listener pane, we see our HTTP listener references the global element by name in the *Connector Configuration* dropdown.
+
image::global-elements-1259f.png[]

[NOTE]
In reality an app would not suffice with only an HTTP listener, however it is a widely used piece of functionality in Mule applications that you will naturally get used to setting up.

=== XML View

Global element XML structure for the HTTP listener is as follows. The required fields for this connector's global element are `name`, `host` and `port`.

[source,xml,linenums]
----
<http:listener-config name="HTTP_Listener_Configuration" host="localhost" port="8081" doc:name="HTTP Listener Configuration">
----

[IMPORTANT]
If you are coding by hand, notice the global element is defined _outside and above_ the `<flow>` that references it.

[source,xml,linenums]
----
<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd

http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd

http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">

    <http:listener-config name="HTTP_Listener_Configuration" host="localhost" port="8081" doc:name="HTTP Listener Configuration">
        <http:worker-threading-profile threadWaitTimeout="1500" maxBufferSize="10"/>
    </http:listener-config>

    <flow name="myNewProjectFlow1" doc:name="myNewProjectFlow1">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/" doc:name="HTTP Connector"/>
    </flow>
</mule>
----
////

== See Also

* xref:about-event-source.adoc[About the Event Source]
* xref:about-event-processors.adoc[About Event Processors]